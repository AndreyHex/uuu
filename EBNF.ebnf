letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
symbol = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"
       | "'" | '"' | "=" | "|" | "." | "," | ";" | "-"  | "_"
       | "+" | "*" | "?" | "\n" | "\t" | "\r" | "\f" | "\b" ;
character = letter | digit | symbol | " " ;

number = [ "-" ], digit +, [ ".", digit + ] ;
string = '"', { character }, '"' ;
identifier = letter | "_", { letter | digit | "_" | "-" } ;
boolean = "true" | "false" ;
null = "null" ;

program     = { declaration }, EOF ;
declaration = statement | var-decl | fn-decl ;
statement   = if | while | block | ( expr-stmt, ";" ) | return ;
block       = "{", declaration + , "}"
if          = "if", "(", expression, ")", statement, ( "else", statement ) ? ;
while       = "while", "(", expression, ")", statement ;
for         = "for", "(", ( expression | var-decl | ";" ), expression ?, ";", expr-stmt ?, ";", ")", statement ;
return      = "return", expression ?, "
var-decl    = "var", identifier, ( "=", expression ) ?, ";" ;
fn-decl     = "fn", identifier, "(", { identifier }, ")" block ;
class-decl  = "class", identifier, ( "<", identifier ) ?, "{", { fn-decl }, "}" ;
assignment  = ( call, "." ) ?, identifier, "=", expr-stmt ;
expr-stmt  = assignment | expression ;
expression = logic-or | ternary ;
logic-or   = logic-and, { "|", logic-and } ;
logic-and  = equality, { "&", equality } ;
ternary    = expression, "?", expression, ":", expression ;
equality   = comparison, { ( "!=" | "==" ), comparison } ;
comparison = term, { ( ">" | "<" | ">=" | "<=" ), term } ;
term       = factor, { ( "+" | "-" ), factor } ;
factor     = unary, { ( "/" | "*" ), unary } ;  (* make it left recursive? *)
unary      = ( "!" | "-" ), unary | call ;
call       = primary ( ( "(",  arguments ?, ")" ) | ( ".", identifier ) ) + ;
arguments  = expression, { ",", expression } ;
primary    = number | string | boolean | null | ( "(", expression, ")" ) |
             identifier | "this" | "super" | "break" | "continue" ;


